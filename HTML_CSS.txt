Следует изучить:
	1)canvas
	2)
	3)

^Легенда:
	^		-глава
	/*		-комментарий
	...		-участок кода
	!..!	-уточненный участок
	@		-разобрано неполностью
	$$		-важные фичи


HTML:

	^Синтаксис:
		<!тег! !атрибут!="!значение!">				-создание одиночного тега			
		<!тег! !атрибут!="!значение!">...</тег>		-создание парного тега
		/*атрибутов может быть множество
		/*если для атрибута не задавать значений, то он примет какое то дефолтное значение(сами атрибуты прописывать не обязательно)
		/*ТД атрибутов: число, текст, путь к файлу ...



	^ТЕГИ:
		/*Условно теги делятся на следующие типы:
		/*	теги верхнего уровня;
		/*	теги заголовка документа;
		/*	блочные элементы;(не могут находится в строчных)
		/*	строчные элементы;
		/*	универсальные элементы;
		/*	списки;
		/*	таблицы;
		/*	фреймы.

		<!--...-->	-комментарий

		head)
			1)meta
				http-equiv
				name
				property
				content

				1)Отображение страницы
					<meta charset="UTF-8"> 	 								-кодировка

					<meta name="viewport" content="width=1170"> 			-фиксированная(меняется вместе со страницей)
					<meta name="viewport" content="width=device-width">		-адаптивная(не меняется и переносятся слова)
					<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">
					-отключает маштабирование на телефонах

					<meta name="format-detection" content="telephone=no"> 	-отключает ссылку у номера телефона на iOS

				2)SEO
					<meta name="description" content="...">					-краткое описание страницы(МАХ 140s)
					<meta name="keywords" content="...">  					-ключевые слова страницы(МАХ 20w, разделение запятой)

					<meta name="robots" content="..."> 						-запрет доступа поисковым роботам к странице(разделение запятой)
						none 			– запретить индексацию страницы полностью.
						noindex 		– запретить индексацию содержимого страницы.
						nofollow 		– игнорировать ссылки в пределах веб-страницы. 
						noimageindex 	- запретить индексацию присутствующих на странице изображений
						noarchive 		- запретить  вывод в результатах поиска ссылки «Сохраненная копия»
						nosnippet 		- запретить  вывод в поисковой выдаче под названием страницы фрагмента текста, описывающего её содержание.

				3)Технические
					<meta name="Author" content="Пупкин Василий Петрович"> 		-автор страницы
					<meta name="Copyright" content="Зимина Татьяна Юрьевна">  	-авторские права
					<meta name="Address" content="Луна, кратер №97"> 			-адрес автора

					<meta http-equiv="refresh" content="S; url=URL"> 			-при перезагрузке страницы(S-секунды, url-ссылка)

				4)Для социальных сетей
 
					1)Facebook
						<meta property="og:locale" content="ru_RU">						-локализация сайта, для русскоязычного сайта ru_RU
						<meta property="og:type" content="article"> 					-тип контента, по умолчанию используется article
						<meta property="og:title" content="META теги"> 					-заголовок страницы, который будет выводится в записи социальной сети
						<meta property="og:description" content="Описание"> 			-описание страницы 
						<meta property="og:image" content="ссылка"> 					-ссылка на изображение, которое будет публиковаться в записи
						<meta property="og:url" content="ссылка">						-ссылка на текущую страницу
						<meta property="og:site_name" content="название">				-название сайта

					2)Twitter
						<meta name="twitter:card" content="summary"> 					-Тип карты, по умолчанию используется summary
						<meta name="twitter:site" content="имя"> 						-Имя/логин автора
						<meta name="twitter:title" content="название"> 					-Название страницы
						<meta name="twitter:description" content="описание">	 		-Описание страницы
						<meta name="twitter:image" content="ссылка"> 					-Cсылка на изображение
			2)title	-заголовок веб-стр
			3)link 	-подключение файла, ссылки
				rel
				href

		body)

			1)Текст
				<a>...</a> 		-ссылка или якорь для текста
					href 			-ссылка на переход
					target			-как открыть ссылку(_blank-новая вкладка)

				<p>...</p>		-текст в обзаце
				<span>...</span>-текст в строке(строчный)
				<br> 			-перевод строки

				<h1>...</h1>	
				<h2>...</h2>	
				<h3>...</h3>	
				<h4>...</h4>	
				<h5>...</h5>	
				<h6>...</h6>	-заголовки по размеру(от большего к меньшему)

				<code>...</code>	-текст со стилем программного кода



			2)Списки и блоки
				<ul>...</ul>	-список с точками
				<ol>...</ol>	-список с нумерацией
				<li>...</li> 	-элемент списка

				<div>...</div>	
				<header>...</header>
				<main>...</main>
				<nav>...</nav>
				<section>...</section>
				<article>...</article>
				<aside>...</aside>
				<footer>...</footer>	-блоки
					id
					class
							


			3)Объекты
				<iframe></iframe> 					-встраивание объекта

				<form></form>						-для передачи данных на сервер
					action
					method		-вид передачи
						post		-скрытая 
						get			-обычная 
					enctype

				<button>!текст на кнопке!</button>	-кнопка
					type
						submit
						reset
				<textarea>...</textarea>			-вводное пространство
					cols
					rows
				<input>								-вводное поле(строчный)
					type		-тип поля
						text 		-обычный текст
						tel 		-цифры
						password 	-точки
						radio 		-выбор(один)
						checkbox 	-выбор(несколько)	
						file 		-файл
					value
					name		
					placeholder	-задний текст
					list		-id выводного списока

					disabled	-отключенный
					checked		-выбранный
					tabindex	-порядок табуляции
				<datalist>...</datalist>			-выводной список
				<option>...</option>				-элемент выводимого списка

				<img>								-картинка(строчный)
				<audio>...</audio>					-аудио
				<video>...</video>					-видео(может включать тег source)
					src
					muted
					autoplay
					controls
					loop
					poster 				-адрес картинки, которая будет отображаться
					preload 			-загрузка до запуска
						auto 		-полная загрузка
						metadata 	-только метаданные(желательно)
						none 		-без загрузки

				<picture>...</picture> 				-контейнер для элементов source и одного img
				<source>
					srcset  	-путь к картинке
					type   		-тип картинки
					media 		-условие для вывода

				<table>...</table>					-таблица
				<tr>...</tr>						-строка таблицы
				<td>...</td>						-элемент строки

				<hr> 								-горизонтальная линия



			4)Интеграция

				<canvas>...</canvas>			-графика js

				<style>...</style> 				-код css
				<script>...</script>			-код js
					src



	^Алгоритмы:
		1)Стандартное начало

			<!DOCTYPE html lg="">
			<html>

			<head>
				<title>...</title>
			</head>

			<body>
				...
			</body>

			</html>

		2)


CSS:

	^Синтаксис:

		1)Общий:
			!Селектор!{
				!св-во!: !значения!;
				...

				!св-во!: !значения! !important; 		-св-во с приоритетом

				--!имя!: !значения! 					-переменная в селекторе
				!св-во!: var(--!имя!) 					-использование переменной

				!св-во!: calc(...) 						-ф-ция нужного просчета для численных св-в(Пример: 100% - 20px)
			}

		2)Селекторы:

			1)Обычные
				!ТЕГ! 					-относиться ко всем блокам с этим тегом
				.!class!				-относиться ко всем блокам с таким классом
				#!id! 					-относиться ко всем блокам с таким АЙДИ
				*						-относится ко всему

				!ТЕГ![!атрибут!]		-относиться ко всем блокам с этим тегом и имеющим этот атрибут
				!ТЕГ!.!class!			-относиться ко всем блокам с этим тегом и имеющим этот класс
				!ТЕГ!#!id!				-относиться ко всем блокам с этим тегом и имеющим этот АЙДИ

			2)Вложенные
				!ТЕГ! !ТЕГ внутри! ...	-относится к вложенному тегу
				.!class! !ТЕГ! 			-относится ко всем тегам которые в блоках с этим классом
				#!id! !ТЕГ! 			-относится ко всем тегам которые в блоках с этим АЙДИ
				...>... 				-относиться ко всем дочерним(1 уровня)

			3)Дополнительно
				!Селектор!, !Селектор! 	-применение для нескольких селекторов сразу

				!ТЕГ!:!псевдокласс!		
				!ТЕГ!:!псевдоэлемент!
				!ТЕГ!::!псевдоэлемент!	
				!ТЕГ!:!псевдокласс!:!псевдоэлемент!	-относятся к тегу по правилу

				@!св-во! 				-создание значений для св-ва

		3)Псевдоклассы/псевдоэлементы:

			1)Состояние:
				:hover					-наведение
				:active 				-нажатие
				:visited				-посещенная ссылка
				:focus 					-

			2)Положение:
				:first-child			-первый элемент
				:last-child 			-последний элемент
				:nth-child(!номер!) 	-элемент по номеру
 					odd 					-нечетные
 					even					-четные


 				Псевдоэлементы:

 				:first-line 			-независимо первая линия 
 				:first-letter 			-первый символ

 				:before 				-определенный контент до
 				:after 					-определенный контент после
 					content 				-для чего именно		/*Обязательное св-во

		4)Приоритеты:
			От уточненного к общему
			Снизу вверх



	^Свойства:

		0)Комментарий/Ф-ции

			/*...*/ 		-коммент
			
			calc()
			repeat()
			minmax()

		1)Шрифт/Текст

			font-family
				(name1, name2, type)
				serif
				sans-serif
				cursive
				fantasy		    
			font-size
			font-weight
				100 - thin
				300 - lite
				400 - normal
				500 - medium
				600 - semibold
				700 - bold
				900 - black
		    font-style
		    	normal
				italic 
				oblique

		    font-variant-ligatures
		    	none
		    	contextual

		    text-align
		    	justify
		    	center
		    	left
		    	right
		    text-decoration
		    	underline
		    	overline
		    	line-through
		    	none
		    text-shadow
		    	(px, px, px, color)
		    text-transform
		    	capitalize
		    	lowercase
		    	uppercase
		    	none
		    text-indent

		    letter-spacing
		    word-spacing
		    line-height

		    white-space
		    	nowrap
		    
		2)Цвет

			color 				-цвет содержимого
			background-color	-цвет фона
				linear-gradient(!поз или гр! , !н цв!, !к цв!)	-градиент

			opacity				-прозрачность

		3)Границы

			margin			-отступ блока от всех
			padding			-отступ контента от border
				(px)
				(%)

			border			-линия в блоке
			outline 		-линия вне блока
				(px, type, color)
				solid
				dotted
				dashed
			border-radius
				(px)
				(%)				-50% круг
			box-shadow
				(px,px,px,px)

			width 			-константа-ширина блока
			max-width		
			min-width
			height 			-константа-высота блока
			max-height
			min-height
				(px)
				(%) 		-width относительно родителя; height относительно родителя с height

			object-fit		-как контент будет подогнан к краям контейнера 
				fill 			-cодержимое контента полностью заполняет область контейнера тега, используя его высоту и ширину.
				contain			-содержимое элемента масштабируется, выравниваясь по центру с сохранением пропорций помещась внутри контейнера.
				cover 			-содержимое элемента обрезается, выравниваясь по центру с сохранением пропорций полностью заполнияя область контейнера.
				none 			-содержимое не изменяет свои собственные размеры, чтобы поместиться и заполнить область контейнера.
				scale-down		-cодержимое элемента выбирает из двух значений none и contain то значение, которое даёт меньшие размеры.

				initial 		-устанавливает это свойство в значение по умолчанию.
				inherit 		-наследует значение свойства от родительского элемента.
			object-position -используется в сочетании с object-fit и задаёт положение контента в элементе
				center
				top
				(px,..)
				(%,..)



		4)Отображение

			FLEXBOX:

				Для контейнера:
					display			-вид блока
						flex 			-все элементы внутри блока склеиваются
						inline-flex		-блок становится размером со склеившимися элементами
					justify-content	-как отобразить(по основной оси)
						flex-start 		-в начале
						flex-end 		-в конце
						center 			-в середине
						space-between	-с промежутками между элементами(1ый эл в начале, последний в конце, равное пространство)
						space-around	-с промежутками вокруг элемента(одинаковые промежутки с двух сторон для каждого элемента)
						space-evenly 	-c одинаковыми пространствами вокруг
					align-items		-как отобразить(по второстепенной оси)
						scretch 		-все элементы подстраиваются под самый большой
						flex-start		-наверху
						flex-end		-внизу
						center 			-по центру
						baseline		-по базовой линии
					align-content 	-как отобразить несколько рядов(по второстепенной оси)
						flex-start 		-в начале
						flex-end 		-в конце
						center 			-в середине
						space-between	-с промежутками между элементами(1ый эл в начале, последний в конце, равное пространство)
						space-around	-с промежутками вокруг элемента(одинаковые промежутки с двух сторон для каждого элемента)
						space-evenly 	-c одинаковыми пространствами вокруг


					flex-flow 		-короткая запись
						!fd! !fw!

					flex-wrap		-как переносить элементы при уменьшении окна
						nowrap 			-не переносить
						wrap 			-переносить
						wrap-reverse 	-перенос в обратном порядке

					flex-direction 	-направление отображения элементов(изменение основной оси)
						row 			-в строку
						row-reverse		-в строку старт с конца
						column			-в столбик
						column-reverse 	-в столбик старт с конца



				Для элемента:
					flex 			-короткая запись
						!fg! !fs! !fb!
					flex-basis 		-базовый размер
						auto
						(px)
						(%)
					flex-grow 		-смогут ли увеличиться(занимаемое место относительно остальных)
						0
						1
					flex-shrink		-смогут ли уменьшиться
						1
						0

					align-self		-как отобразить(по второстепенной оси)
						scretch 		-элемент подстраивается под самый большой
						flex-start		-наверху
						flex-end		-внизу
						center 			-по центру
						baseline		-по базовой линии
					order 			-вывод в нужном порядке
						0
						1
						-1

			GRID:
				Для контейнера:
					display					-вид блока
						grid					-все элементы внутри блока склеиваются


					grid-template
					grid-template-columns 	-как отоброзить колонки
					grid-template-rows 		-как отобразить строки
						(px)
						(%)
						(fr)
					grid-template-areas 	-как отобразить все
						(str)


					grid-gap 				-короткая запись
						!gcg! !grg!
					grid-column-gap 		-расстояние между колонками
					grid-row-gap 			-расстояние между строками
						(px)
						(%)
						(fr)

					grid-auto-rows 			-стандартная высота строки
						(px)
						auto


					justify-content	-как отобразить(по основной оси)
						start 			-в начале
						end 			-в конце
						center 			-в середине
						space-between	-с промежутками между элементами(1ый эл в начале, последний в конце, равное пространство)
						space-around	-с промежутками вокруг элемента(одинаковые промежутки с двух сторон для каждого элемента)
						space-evenly 	-c одинаковыми пространствами вокруг
					align-content 	-как отобразить (по второстепенной оси)
						start 			-в начале
						end 			-в конце
						center 			-в середине
						space-between	-с промежутками между элементами(1ый эл в начале, последний в конце, равное пространство)
						space-around	-с промежутками вокруг элемента(одинаковые промежутки с двух сторон для каждого элемента)
						space-evenly 	-c одинаковыми пространствами вокруг


					justify-items		-как отобразить относительно самой ячейки(по основной оси)
						scretch 		-все элементы подстраиваются под самый большой
						start			-наверху
						end				-внизу
						center 			-по центру
						baseline		-по базовой линии
					align-items		-как отобразить относительно самой ячейки(по второстепенной оси)
						scretch 		-все элементы подстраиваются под самый большой
						start			-наверху
						end				-внизу
						center 			-по центру
						baseline		-по базовой линии
					


				Для элемента:
					justify-self	-как отобразить относительно самой ячейки(по основной оси)
						scretch 		-элемент подстраиваtтся под самый большой
						start			-наверху
						end				-внизу
						center 			-по центру
						baseline		-по базовой линии
					align-self		-как отобразить относительно самой ячейки(по второстепенной оси)
						scretch 		-элемент подстраиваtтся под самый большой
						start			-наверху
						end				-внизу
						center 			-по центру
						baseline		-по базовой линии

					grid-area
					grid-column
					grid-column-start
					grid-column-end
					grid-row
					grid-row-start
					grid-row-end
						1
						-1

					grid-area 			-имя при отображении(с помощью areas)
					order


				Ф-ции:
					repeat()
					minmax()


			display			- вид блока
				block 			-занимает всю ширину
				inline 			-игнорирует height и width, занимает места в зависимости от содержимого
				inline-block 	-не игнорирует height и width, занимает места в зависимости от содержимого
				none 			- отключение

				table
				flex
				grid
			overflow		-отображение контента блока
				visible			- видно все
				hidden			- видно только то что в блоке
				scroll			- видно только то что в блоке со скролом 
				auto			- видно только то что в блоке с удобным скролом 
			visibility 		-отображение блока
				hidden

			position 		-способ позиционирования через св-ва (left/right,top/bottom)
				static			-относительно родителя и соседних элементов без (left/right,top/bottom)

				relative		-от положения static
				absolute		-относительно родителя с relative, absolute, fixed и sticky иначе относительно сайта
				fixed			-относительно окна браузера(то есть идет со скроллом)
				sticky 			-static пока не дойдет скролл, после fixed
			top
			bottom
			left
			right
			z-index


			cursor			-вид курсора


			СКРЫТИЯ:
				opacity: 0				-занимаемое место и взаимодействие остается
				visibility: hidden		-занимаемое место остается
				display: none			-ничего не остается

		5)Background:
			background 				-короткая запись
				!bi! !bp!/!bs! !br! !ba!, ... 	/*чем правее тем выше
			background-color
			background-image
				url('!ссылка!'), ... 		
			background-position
				(px,..)
				(%,..)
			background-repeat	
				repeat
				no-repeat
				repeat-x
				repeat-y
				space
				round

				inherit				-наследование
			background-attachment	
				scroll				-двигается с прокруткой(стандарт)
				fixed				-неподвижно относительно сайта(то есть идет со скроллом)
				local				-неподвижно внутри блока 

				inherit 			-наследование
			background-size
				auto auto
				(px,..)
				(%,..)
				auto 				
				cover				-сохранение пропорций, ширина или высота по блоку(по большей стороне)
				contain				-сохранение пропорций, целиком в блоке(по меньшей стороне)



		6)Дополнительно

			-webkit-text-fill-color		-
				transparent 				-прозрачный текст
			-webkit-background-clip		-обрезка фона по тексту


			list-type-style				-оформление списка

			1)Анимации:

				1)CSS-переходы(transition):

					transition 					-короткая запись
						!tp! !td!s !ttf! !td!

					transition-property 		– свойство перехода
						!prop!
						all
					transition-duration 		– продолжительность перехода
						(s)
						(ms)
					transition-timing-function 	– временная функция перехода
						cubic-bezier(x2, y2, x3, y3)
						steps(steps, [start/end])
						!func!
					transition-delay 			– задержка начала перехода(Отрицательные значения также допустимы. В таком случае анимация начнётся с середины)
						(s)
						(ms)

				2)Ключевые кадры(keyframes)

					@keyframes !name! {     -задать анимацию   
					    from { ... }            
					    to { ... } 
					}

					animation 					-короткая запись
						!an! !ad!s !aic! !ad!

					animation-name 				-анимировать анимацию
						!str!
					animation-duration 			-время анимации
						(s)
					animation-iteration-count 	-количество воспроизведений анимации
						!num!
						infinite
					animation-direction 		-направление анимации
						normal
						reverse
						alternate
						alternate-reverse








	^Команды:

		1)Подключение шрифтов:

			1)Копируем строку  с google.fonts
				HTML/SCSS

			2)Скачать/Сконвертировать/Вставка@/Использование

				@font-face 
				{
					font-family: 'Имя шрифта';
					font-display: swap;
					src: url("../fonts/файл шрифта.eot");
					src: local("O"), url("../fonts/файл шрифта.woff") format("woff"), 
							url("../fonts/файл шрифта.ttf") format("truetype"), 
							url("../fonts/файл шрифта.svg") format("svg");
					font-weight: normal;
					font-style: normal;
				}

		2)Медиа запросы:

			@media !условие!
			{
				!Селектор!{
					!св-ва!: !значения!;
					...
				}
			}

			@import ... !условие! 	-подключение при условии

			Условия: Тип устройства, Характеристики устройства(and, or - лог операторы)

				Тип:
					all 	-все типов устройств
					print 	-страничные материалы и документы, просматриваемые на экране в режиме предварительного просмотра печати.
					screen 	-экраны цветных компьютерных мониторов.
					speech 	-синтезаторы речи
				Характеристики:
					width 		-проверяет ширину области просмотра
					height 		-проверяет высоту области просмотра
					min-width	-ширина области просмотра больше значения, указанного в запросе
					max-width  	-ширина области просмотра меньше значения, указанного в запросе
					
					min-height 			-высота области просмотра больше значения, указанного в запросе
					max-height 			-высота области просмотра меньше значения, указанного в запросе
					aspect-ratio
					min-aspect-ratio 
					max-aspect-ratio 
					orientation 		-ориентация области просмотра(portrait,landscape).
					resolution 			-разрешение экрана(dpi)
					min-resolution 		-минимальное разрешение экрана
					max-resolution 		-максимальное разрешение экрана
					color 				-количество бит на каждый из цветовых компонентов устройства вывода
					min-color 			-минимальное количество бит
					max-color 			-максимальное количество бит
					color-index 		
					min-color-index 
					max-color-index 
					monochrome 	
					min-monochrome 
					-webkit-device-pixel-ratio 	

		3)Импорт:

			@import "!имя файла!" 	-подключение файла .scss
 			@import url('...')	 	-подключение ссылки
 			@import ... !условие! 	-подключение при условии



	^Алгоритмы:

		1)Обнуление:

			*{
				padding: 0;
				margin: 0;
				border: 0;
			}
			*,*:before,*:after{					
				-moz-box-sizing: border-box;
				-webkit-box-sizing: border-box;
				box-sizing: border-box;
			}
			:focus,:active{outline: none;}
			a:focus,a:active{outline: none;}

			nav,footer,header,aside{display: block;}

			html,body{
				height: 100%;
				width: 100%;
				font-size: 100%;
				line-height: 1;
				font-size: 14px;
				-ms-text-size-adjust: 100%;
				-moz-text-size-adjust: 100%;
				-webkit-text-size-adjust: 100%;
			}
			input,button,textarea{font-family:inherit;}

			input::-ms-clear{display: none;}
			button{cursor: pointer;}
			button::-moz-focus-inner {padding:0;border:0;}
			a, a:visited{text-decoration: none;}
			a:hover{text-decoration: none;}
			ul li{list-style: none;}
			img{vertical-align: top;}

			h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight: 400;}



	^SСSS:
		/*Все как в CSS +

		0)Импорт/Комментарии

 			//... 	-однострочный невыводящийся

 			@import "!имя файла!" 	-подключение файла .scss
 			@import url('...')	 	-подключение ссылки

		1)Вложенности:

			!Селектор!{

				!св-ва!: !значения!;
				...

				!Селектор! ...

				&:!псевдо! ...

				!Селектор!.& ...

				@media ...
			}

			& - Родитель

		2)Переменные:

			$!имя!:  !значение! 	-создание
			!св-во!: $!имя! 		-вызов

		3)Шаблон:
			/*Набор св-в со значениями(параметров селекторов)

			%!имя!{ 						-создание невыводящегося шаблона
				!св-ва!: !значения!;
				...
			}

			@extend %!имя! 					-подключение

			.!имя!{ 						-создание выводящегося шаблона(автоматом используется для этого класса)
				!св-ва!: !значения!;
				...
			}

			@extend .!имя! 					-подключение

		4)Миксины:
			/*Шаблон+Переменные= Типа Ф-ция

			@mixin !имя!($!параметр!, ...){ 		-создание
				!св-ва!: !значения!;
				!св-ва!: !параметры!;
				...
			}

			@include !имя!(!значения параметров!) 	-подключение

		5)Математика:

			+, -, *, /, % 


Адаптивы:

	1)Подходы верстки:

	 	1)Фиксированная(изменение размера контента с изменением окна)

	 		<meta name="viewport" content="width=!ширина контента!"> 

	 		body{min-width: !ширина контента!}

	 		.cont{width: !ширина контента!}

	 	2)Отзывчивая(изменение элементов с изменением окна)

			<meta name="viewport" content="width=device-width"> 

			.cont{max-width: !ширина контента!}	

			-убрать все фиксированные ширины

			-размеры элементов в %

	 	3)Адаптивная(перестраивание на определенных моментах)

	 		<meta name="viewport" content="width=device-width">  	

			.cont{max-width: !ширина контента!}	

			-убрать все фиксированные ширины

			-медиа запросы

	 	4)Отзывчивая + адаптивная

	 	 	<meta name="viewport" content="width=device-width">  	

			.cont{max-width: !ширина контента!}	

			-убрать все фиксированные ширины

			-размеры элементов в % И медиа запросы

	2)Адаптивные изображения:

		1)В тексте:

			img{max-width: 100%}

		2)В колонках:

			.cont{
				padding:  0 0 % 0
				overflow: hidden
				position: relative
			}
			img{
				width:	  100%
				height:	  100%
				object-fit: cover
				position: absolute
				top:0
				left:0
			}

		3)В рядах:

			.cont{
				flex: 0 0 %
				position: relative
				min-height: ...


			}
			img{
				width:	  100%
				height:	  100%
				object-fit: cover
				position: absolute
				top:0
				left:0
			}

		4)Изменение через  HTML:

			<picture>
				<source srcset=".." type=".." media="(min-width:1330)">
 				<source srcset=".." type=".." media="(min-width:992)">
 				<source srcset=".." type=".." media="(min-width:992)">
 				<img src="..">
			</picture>

	3)Адаптивное видео:

		.item__video {
			position: relative;
			margin: 0px 0px 15px 0px;
			padding: 0 0 % 0; 		
		}
		.item__video video,
		.item__video iframe {
			object-fit: cover;
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
		}

